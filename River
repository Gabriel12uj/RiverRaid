<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Riverraid Rosa</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #ffb6c1;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }

        #game-container {
            position: relative;
            width: 100%;
            max-width: 600px;
            height: 80vh;
            max-height: 800px;
            border: 4px solid #ff69b4;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(255, 105, 180, 0.7);
        }

        #game-canvas {
            background-color: #ffc0cb;
            width: 100%;
            height: 100%;
        }

        #score-display {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 20px;
            color: #ff1493;
            font-weight: bold;
            text-shadow: 1px 1px 2px #ffffff;
        }

        #fuel-bar-container {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 100px;
            height: 20px;
            background-color: rgba(255, 255, 255, 0.7);
            border: 2px solid #ff1493;
            border-radius: 10px;
            overflow: hidden;
        }

        #fuel-bar {
            height: 100%;
            width: 100%;
            background-color: #ff1493;
            transition: width 0.3s;
        }

        #start-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 182, 193, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }

        #title {
            font-size: 40px;
            color: #ff1493;
            text-shadow: 2px 2px 4px #ffffff;
            margin-bottom: 20px;
        }

        #start-button {
            padding: 15px 30px;
            font-size: 20px;
            background-color: #ff69b4;
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            box-shadow: 0 5px 0 #ff1493;
            outline: none;
            transition: all 0.1s;
        }

        #start-button:hover {
            background-color: #ff1493;
        }

        #start-button:active {
            box-shadow: 0 2px 0 #ff1493;
            transform: translateY(3px);
        }

        #game-over {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 182, 193, 0.9);
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }

        #game-over h2 {
            font-size: 40px;
            color: #ff1493;
            text-shadow: 2px 2px 4px #ffffff;
            margin-bottom: 20px;
        }

        #final-score {
            font-size: 30px;
            color: #ff1493;
            margin-bottom: 20px;
        }

        #restart-button {
            padding: 15px 30px;
            font-size: 20px;
            background-color: #ff69b4;
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            box-shadow: 0 5px 0 #ff1493;
            outline: none;
            transition: all 0.1s;
        }

        #restart-button:hover {
            background-color: #ff1493;
        }

        #restart-button:active {
            box-shadow: 0 2px 0 #ff1493;
            transform: translateY(3px);
        }

        #controls {
            position: absolute;
            bottom: 10px;
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 20px;
        }

        .control-button {
            width: 60px;
            height: 60px;
            background-color: rgba(255, 105, 180, 0.5);
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            color: white;
            user-select: none;
            touch-action: manipulation;
        }

        @media (min-width: 768px) {
            #controls {
                display: none;
            }
        }

        @media (max-width: 500px) {
            #title {
                font-size: 30px;
            }
            
            #score-display {
                font-size: 16px;
            }
            
            #fuel-bar-container {
                width: 80px;
                height: 16px;
            }
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="game-canvas"></canvas>
        <div id="score-display">Pontos: 0</div>
        <div id="fuel-bar-container">
            <div id="fuel-bar"></div>
        </div>
        
        <div id="start-screen">
            <div id="title">Riverraid Rosa</div>
            <button id="start-button">Jogar</button>
        </div>
        
        <div id="game-over">
            <h2>Game Over</h2>
            <div id="final-score">Pontos: 0</div>
            <button id="restart-button">Jogar Novamente</button>
        </div>
        
        <div id="controls">
            <div class="control-button" id="left-button">‚Üê</div>
            <div class="control-button" id="fire-button">üî•</div>
            <div class="control-button" id="right-button">‚Üí</div>
        </div>
    </div>

    <script>
        // Elementos do DOM
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score-display');
        const fuelBar = document.getElementById('fuel-bar');
        const startScreen = document.getElementById('start-screen');
        const startButton = document.getElementById('start-button');
        const gameOverScreen = document.getElementById('game-over');
        const finalScoreDisplay = document.getElementById('final-score');
        const restartButton = document.getElementById('restart-button');
        const leftButton = document.getElementById('left-button');
        const rightButton = document.getElementById('right-button');
        const fireButton = document.getElementById('fire-button');

        // Configurar o tamanho do canvas
        function resizeCanvas() {
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Vari√°veis do jogo
        let gameRunning = false;
        let gameSpeed = 2;
        let score = 0;
        let fuel = 100;
        let lastFuelDecreaseTime = 0;
        let backgroundOffset = 0;
        
        // Jogador
        const player = {
            width: 40,
            height: 60,
            x: 0,
            y: 0,
            speed: 5,
            color: '#ff1493',
            bullets: [],
            bulletSpeed: 7,
            bulletWidth: 5,
            bulletHeight: 15,
            lastShotTime: 0,
            shotDelay: 300 // 300ms entre tiros
        };
        
        // Obst√°culos (ilhas e navios)
        let obstacles = [];
        
        // Itens colet√°veis (combust√≠vel)
        let fuelTanks = [];
        
        // Controles
        const keys = {
            ArrowLeft: false,
            ArrowRight: false,
            Space: false
        };
        
        // Para controle touch
        let leftPressed = false;
        let rightPressed = false;
        
        // Fun√ß√£o de inicializa√ß√£o
        function init() {
            score = 0;
            scoreDisplay.textContent = `Pontos: ${score}`;
            fuel = 100;
            fuelBar.style.width = `${fuel}%`;
            obstacles = [];
            fuelTanks = [];
            player.bullets = [];
            player.x = canvas.width / 2 - player.width / 2;
            player.y = canvas.height - player.height - 20;
            gameSpeed = 2;
            
            // Gerar obst√°culos iniciais
            for (let i = 0; i < 3; i++) {
                createObstacle();
            }
            
            // Gerar combust√≠vel inicial
            createFuelTank();
            
            gameRunning = true;
            gameLoop();
        }
        
        // Fun√ß√£o para criar obst√°culos
        function createObstacle() {
            const type = Math.random() < 0.5 ? 'island' : 'ship';
            const width = type === 'island' ? 80 + Math.random() * 100 : 40 + Math.random() * 30;
            const height = type === 'island' ? 60 + Math.random() * 50 : 70 + Math.random() * 40;
            
            // Garantir que h√° espa√ßo para o jogador passar
            const minGap = player.width * 1.5;
            const maxX = canvas.width - width - minGap;
            
            let x;
            if (obstacles.length > 0) {
                const lastObstacle = obstacles[obstacles.length - 1];
                // Evitar que obst√°culos fiquem alinhados verticalmente
                if (lastObstacle.x < canvas.width / 2) {
                    x = canvas.width / 2 + Math.random() * (maxX - canvas.width / 2);
                } else {
                    x = Math.random() * (canvas.width / 2 - width - minGap) + minGap;
                }
            } else {
                x = Math.random() * maxX;
            }
            
            obstacles.push({
                x: x,
                y: -height - Math.random() * 300, // Posi√ß√£o acima da tela
                width: width,
                height: height,
                type: type,
                color: type === 'island' ? '#ff85a2' : '#ff4d94'
            });
        }
        
        // Fun√ß√£o para criar tanques de combust√≠vel
        function createFuelTank() {
            const width = 30;
            const height = 40;
            
            fuelTanks.push({
                x: Math.random() * (canvas.width - width),
                y: -height - Math.random() * 500, // Posi√ß√£o acima da tela
                width: width,
                height: height,
                color: '#ff85ff'
            });
        }
        
        // Fun√ß√£o principal do jogo (game loop)
        function gameLoop() {
            if (!gameRunning) return;
            
            update();
            draw();
            
            requestAnimationFrame(gameLoop);
        }
        
        // Atualizar estados do jogo
        function update() {
            // Diminuir combust√≠vel
            const currentTime = Date.now();
            if (currentTime - lastFuelDecreaseTime > 1000) {
                fuel -= 1;
                lastFuelDecreaseTime = currentTime;
                fuelBar.style.width = `${fuel}%`;
            }
            
            // Verificar fim de jogo (sem combust√≠vel)
            if (fuel <= 0) {
                gameOver();
                return;
            }
            
            // Mover jogador
            if (keys.ArrowLeft || leftPressed) {
                player.x -= player.speed;
            }
            if (keys.ArrowRight || rightPressed) {
                player.x += player.speed;
            }
            
            // Limitar movimento do jogador
            if (player.x < 0) player.x = 0;
            if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;
            
            // Atirar
            if ((keys.Space || fireButton.pressed) && currentTime - player.lastShotTime > player.shotDelay) {
                player.bullets.push({
                    x: player.x + player.width / 2 - player.bulletWidth / 2,
                    y: player.y,
                    width: player.bulletWidth,
                    height: player.bulletHeight
                });
                player.lastShotTime = currentTime;
            }
            
            // Mover proj√©teis
            for (let i = player.bullets.length - 1; i >= 0; i--) {
                player.bullets[i].y -= player.bulletSpeed;
                
                // Remover proj√©teis fora da tela
                if (player.bullets[i].y + player.bullets[i].height < 0) {
                    player.bullets.splice(i, 1);
                }
            }
            
            // Rolar o fundo e mover obst√°culos
            backgroundOffset += gameSpeed;
            if (backgroundOffset >= 40) backgroundOffset = 0;
            
            // Mover e verificar colis√µes com obst√°culos
            for (let i = obstacles.length - 1; i >= 0; i--) {
                obstacles[i].y += gameSpeed;
                
                // Verificar colis√£o com jogador
                if (checkCollision(player, obstacles[i])) {
                    gameOver();
                    return;
                }
                
                // Verificar colis√£o com proj√©teis
                for (let j = player.bullets.length - 1; j >= 0; j--) {
                    if (checkCollision(player.bullets[j], obstacles[i])) {
                        // Aumentar pontua√ß√£o
                        score += obstacles[i].type === 'ship' ? 30 : 10;
                        scoreDisplay.textContent = `Pontos: ${score}`;
                        
                        // Remover proj√©til e obst√°culo
                        player.bullets.splice(j, 1);
                        obstacles.splice(i, 1);
                        
                        // Gerar novo obst√°culo
                        createObstacle();
                        
                        // Aumentar velocidade do jogo a cada 200 pontos
                        gameSpeed = 2 + Math.floor(score / 200) * 0.5;
                        
                        break;
                    }
                }
                
                // Remover obst√°culos fora da tela
                if (i >= 0 && obstacles[i].y > canvas.height) {
                    obstacles.splice(i, 1);
                    createObstacle();
                }
            }
            
            // Mover e verificar colis√µes com tanques de combust√≠vel
            for (let i = fuelTanks.length - 1; i >= 0; i--) {
                fuelTanks[i].y += gameSpeed;
                
                // Verificar colis√£o com jogador
                if (checkCollision(player, fuelTanks[i])) {
                    // Aumentar combust√≠vel
                    fuel = Math.min(100, fuel + 25);
                    fuelBar.style.width = `${fuel}%`;
                    
                    // Remover tanque de combust√≠vel
                    fuelTanks.splice(i, 1);
                    
                    // Gerar novo tanque
                    createFuelTank();
                    
                    continue;
                }
                
                // Remover tanques fora da tela
                if (fuelTanks[i].y > canvas.height) {
                    fuelTanks.splice(i, 1);
                    createFuelTank();
                }
            }
            
            // Garantir que temos obst√°culos suficientes
            while (obstacles.length < 3) {
                createObstacle();
            }
            
            // Garantir que temos tanques de combust√≠vel suficientes
            while (fuelTanks.length < 1) {
                createFuelTank();
            }
        }
        
        // Verificar colis√µes
        function checkCollision(obj1, obj2) {
            return obj1.x < obj2.x + obj2.width &&
                   obj1.x + obj1.width > obj2.x &&
                   obj1.y < obj2.y + obj2.height &&
                   obj1.y + obj1.height > obj2.y;
        }
        
        // Desenhar o jogo
        function draw() {
            // Limpar canvas
            ctx.fillStyle = '#ffc0cb';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Desenhar rio (mais escuro no meio)
            const riverColor = '#ff80aa';
            const riverWidth = canvas.width * 0.8;
            const riverX = (canvas.width - riverWidth) / 2;
            
            ctx.fillStyle = riverColor;
            ctx.fillRect(riverX, 0, riverWidth, canvas.height);
            
            // Padr√£o de fundo (linhas horizontais)
            ctx.fillStyle = '#ffa0c0';
            for (let i = 0; i < canvas.height; i += 40) {
                ctx.fillRect(riverX, i + backgroundOffset, riverWidth, 5);
            }
            
            // Desenhar margens
            const gradient1 = ctx.createLinearGradient(0, 0, riverX, 0);
            gradient1.addColorStop(0, '#ffb6c1');
            gradient1.addColorStop(1, '#ff80aa');
            
            const gradient2 = ctx.createLinearGradient(riverX + riverWidth, 0, canvas.width, 0);
            gradient2.addColorStop(0, '#ff80aa');
            gradient2.addColorStop(1, '#ffb6c1');
            
            ctx.fillStyle = gradient1;
            ctx.fillRect(0, 0, riverX, canvas.height);
            
            ctx.fillStyle = gradient2;
            ctx.fillRect(riverX + riverWidth, 0, canvas.width - riverX - riverWidth, canvas.height);
            
            // Desenhar obst√°culos
            obstacles.forEach(obstacle => {
                ctx.fillStyle = obstacle.color;
                ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
                
                // Adicionar detalhes aos obst√°culos
                if (obstacle.type === 'island') {
                    ctx.fillStyle = '#ff6090';
                    ctx.beginPath();
                    ctx.ellipse(
                        obstacle.x + obstacle.width / 2,
                        obstacle.y + obstacle.height / 3,
                        obstacle.width / 3,
                        obstacle.height / 4,
                        0, 0, Math.PI * 2
                    );
                    ctx.fill();
                } else { // ship
                    ctx.fillStyle = '#ff3080';
                    ctx.fillRect(
                        obstacle.x + obstacle.width / 4,
                        obstacle.y + obstacle.height / 4,
                        obstacle.width / 2,
                        obstacle.height / 3
                    );
                }
            });
            
            // Desenhar tanques de combust√≠vel
            fuelTanks.forEach(tank => {
                // Corpo do tanque
                ctx.fillStyle = tank.color;
                ctx.fillRect(tank.x, tank.y, tank.width, tank.height);
                
                // S√≠mbolo de combust√≠vel
                ctx.fillStyle = '#ffffff';
                ctx.font = '14px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('F', tank.x + tank.width / 2, tank.y + tank.height / 2 + 5);
            });
            
            // Desenhar jogador (avi√£o)
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);
            
            // Adicionar detalhes ao avi√£o
            // Asas
            ctx.fillStyle = '#ff4da6';
            ctx.beginPath();
            ctx.moveTo(player.x, player.y + player.height / 2);
            ctx.lineTo(player.x - 15, player.y + player.height / 2 + 10);
            ctx.lineTo(player.x, player.y + player.height / 2 + 10);
            ctx.fill();
            
            ctx.beginPath();
            ctx.moveTo(player.x + player.width, player.y + player.height / 2);
            ctx.lineTo(player.x + player.width + 15, player.y + player.height / 2 + 10);
            ctx.lineTo(player.x + player.width, player.y + player.height / 2 + 10);
            ctx.fill();
            
            // Cauda
            ctx.fillStyle = '#ff4da6';
            ctx.beginPath();
            ctx.moveTo(player.x + player.width / 2 - 10, player.y + player.height - 5);
            ctx.lineTo(player.x + player.width / 2 + 10, player.y + player.height - 5);
            ctx.lineTo(player.x + player.width / 2, player.y + player.height + 10);
            ctx.fill();
            
            // Cockpit
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.ellipse(
                player.x + player.width / 2,
                player.y + player.height / 3,
                player.width / 3,
                player.height / 5,
                0, 0, Math.PI * 2
            );
            ctx.fill();
            
            // Desenhar proj√©teis
            ctx.fillStyle = '#ff0080';
            player.bullets.forEach(bullet => {
                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
            });
        }
        
        // Fun√ß√£o de fim de jogo
        function gameOver() {
            gameRunning = false;
            finalScoreDisplay.textContent = `Pontos: ${score}`;
            gameOverScreen.style.display = 'flex';
        }
        
        // Event listeners para controles de teclado
        window.addEventListener('keydown', (e) => {
            if (e.key in keys) {
                keys[e.key] = true;
                e.preventDefault();
            }
            
            // Tecla de espa√ßo para tiro
            if (e.code === 'Space') {
                keys.Space = true;
                e.preventDefault();
            }
        });
        
        window.addEventListener('keyup', (e) => {
            if (e.key in keys) {
                keys[e.key] = false;
                e.preventDefault();
            }
            
            // Tecla de espa√ßo para tiro
            if (e.code === 'Space') {
                keys.Space = false;
                e.preventDefault();
            }
        });
        
        // Event listeners para controles touch
        leftButton.addEventListener('touchstart', (e) => {
            leftPressed = true;
            e.preventDefault();
        });
        
        leftButton.addEventListener('touchend', () => {
            leftPressed = false;
        });
        
        rightButton.addEventListener('touchstart', (e) => {
            rightPressed = true;
            e.preventDefault();
        });
        
        rightButton.addEventListener('touchend', () => {
            rightPressed = false;
        });
        
        fireButton.pressed = false;
        
        fireButton.addEventListener('touchstart', (e) => {
            fireButton.pressed = true;
            e.preventDefault();
        });
        
        fireButton.addEventListener('touchend', () => {
            fireButton.pressed = false;
        });
        
        // Usando mouse para bot√µes touch (para testes em desktop)
        leftButton.addEventListener('mousedown', () => leftPressed = true);
        leftButton.addEventListener('mouseup', () => leftPressed = false);
        leftButton.addEventListener('mouseleave', () => leftPressed = false);
        
        rightButton.addEventListener('mousedown', () => rightPressed = true);
        rightButton.addEventListener('mouseup', () => rightPressed = false);
        rightButton.addEventListener('mouseleave', () => rightPressed = false);
        
        fireButton.addEventListener('mousedown', () => fireButton.pressed = true);
        fireButton.addEventListener('mouseup', () => fireButton.pressed = false);
        fireButton.addEventListener('mouseleave', () => fireButton.pressed = false);
        
        // Event listeners para iniciar e reiniciar o jogo
        startButton.addEventListener('click', () => {
            startScreen.style.display = 'none';
            init();
        });
        
        restartButton.addEventListener('click', () => {
            gameOverScreen.style.display = 'none';
            init();
        });
        
        // Prevenir comportamentos padr√£o de toque em dispositivos m√≥veis
        document.addEventListener('touchmove', (e) => {
            if (e.target.id === 'left-button' || e.target.id === 'right-button' || e.target.id === 'fire-button') {
                e.preventDefault();
            }
        }, { passive: false });
    </script>
</body>
</html>
